# Print an optspec for argparse to handle cmd's options that are independent of any subcommand.
function __fish_qlty_global_optspecs
	string join \n debug no-upgrade-check h/help V/version
end

function __fish_qlty_needs_command
	# Figure out if the current invocation already has a command.
	set -l cmd (commandline -opc)
	set -e cmd[1]
	argparse -s (__fish_qlty_global_optspecs) -- $cmd 2>/dev/null
	or return
	if set -q argv[1]
		# Also print the command, so this can be used to figure out what it is.
		echo $argv[1]
		return 1
	end
	return 0
end

function __fish_qlty_using_subcommand
	set -l cmd (__fish_qlty_needs_command)
	test -z "$cmd"
	and return 1
	contains -- $cmd[1] $argv
end

complete -c qlty -n "__fish_qlty_needs_command" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_needs_command" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_needs_command" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_needs_command" -s V -l version -d 'Print version'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "auth" -d 'Manage authentication'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "build" -d 'Run an analysis build'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "cache" -d 'Manage cache'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "check" -d 'Run linters'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "completions" -d 'Generate or install Qlty CLI shell completions'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "config" -d 'Print current version'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "coverage" -d 'View, transform, and publish code coverage'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "dashboard" -d 'Open the Qlty Cloud dashboard in the browser'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "deinit" -d 'Remove Qlty from the current repository'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "discord" -d 'Join our Discord server (opens in the browser)'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "docs" -d 'Open the docs website in the browser'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "fmt" -d 'Auto-format files by rewriting them'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "githooks" -d 'Manage Git hooks'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "init" -d 'Set up Qlty in the current repository'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "install" -d 'Install linters and their dependencies'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "metrics" -d 'Compute code quality metrics'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "panic" -d 'Intentionally panic to test crash handling'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "parse" -d 'Parse source code'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "patch" -d 'Apply patches from check'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "plugins" -d 'Manage plugins'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "smells" -d 'Find code smells like duplication and complexity'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "telemetry" -d 'Send telemetry'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "upgrade" -d 'Upgrade the Qlty CLI'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "validate" -d 'Validate the project'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "version" -d 'Print the current Qlty CLI version'
complete -c qlty -n "__fish_qlty_needs_command" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and not __fish_seen_subcommand_from login logout signup whoami help" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and not __fish_seen_subcommand_from login logout signup whoami help" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and not __fish_seen_subcommand_from login logout signup whoami help" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and not __fish_seen_subcommand_from login logout signup whoami help" -f -a "login" -d 'Authenticate with Qlty Cloud'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and not __fish_seen_subcommand_from login logout signup whoami help" -f -a "logout" -d 'Log out from Qlty Cloud'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and not __fish_seen_subcommand_from login logout signup whoami help" -f -a "signup" -d 'Open the Qlty Cloud sign up flow in the browser'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and not __fish_seen_subcommand_from login logout signup whoami help" -f -a "whoami" -d 'Print the email address of the authenticated Qlty Cloud user'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and not __fish_seen_subcommand_from login logout signup whoami help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and __fish_seen_subcommand_from login" -l token -d 'Provide a CLI token manually or use "-" to read from standard input (see https://qlty.sh/user/settings/cli)' -r
complete -c qlty -n "__fish_qlty_using_subcommand auth; and __fish_seen_subcommand_from login" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and __fish_seen_subcommand_from login" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and __fish_seen_subcommand_from login" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and __fish_seen_subcommand_from logout" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and __fish_seen_subcommand_from logout" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and __fish_seen_subcommand_from logout" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and __fish_seen_subcommand_from signup" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and __fish_seen_subcommand_from signup" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and __fish_seen_subcommand_from signup" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and __fish_seen_subcommand_from whoami" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and __fish_seen_subcommand_from whoami" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and __fish_seen_subcommand_from whoami" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and __fish_seen_subcommand_from help" -f -a "login" -d 'Authenticate with Qlty Cloud'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and __fish_seen_subcommand_from help" -f -a "logout" -d 'Log out from Qlty Cloud'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and __fish_seen_subcommand_from help" -f -a "signup" -d 'Open the Qlty Cloud sign up flow in the browser'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and __fish_seen_subcommand_from help" -f -a "whoami" -d 'Print the email address of the authenticated Qlty Cloud user'
complete -c qlty -n "__fish_qlty_using_subcommand auth; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c qlty -n "__fish_qlty_using_subcommand build" -l upstream -d 'Upstream base ref to compare against' -r
complete -c qlty -n "__fish_qlty_using_subcommand build" -l output-path -r -F
complete -c qlty -n "__fish_qlty_using_subcommand build" -l no-error -d 'Exit successfully regardless of linter errors'
complete -c qlty -n "__fish_qlty_using_subcommand build" -l backfill -d 'Use the commit timestamp as the build timestamp'
complete -c qlty -n "__fish_qlty_using_subcommand build" -l ai -d 'Generate AI fixes (requires OpenAI API key)'
complete -c qlty -n "__fish_qlty_using_subcommand build" -l cache -d 'Use the issues cache (defaults to disabled)'
complete -c qlty -n "__fish_qlty_using_subcommand build" -l no-plugins
complete -c qlty -n "__fish_qlty_using_subcommand build" -l print
complete -c qlty -n "__fish_qlty_using_subcommand build" -l skip-errored-plugins
complete -c qlty -n "__fish_qlty_using_subcommand build" -l fetch-sources -d 'Fetch sources before build'
complete -c qlty -n "__fish_qlty_using_subcommand build" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand build" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand build" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and not __fish_seen_subcommand_from prune clean dir status help" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and not __fish_seen_subcommand_from prune clean dir status help" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and not __fish_seen_subcommand_from prune clean dir status help" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and not __fish_seen_subcommand_from prune clean dir status help" -f -a "prune" -d 'Prune the cache'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and not __fish_seen_subcommand_from prune clean dir status help" -f -a "clean" -d 'Delete the cache for the current project'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and not __fish_seen_subcommand_from prune clean dir status help" -f -a "dir" -d 'Print the cache directory for the current project'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and not __fish_seen_subcommand_from prune clean dir status help" -f -a "status" -d 'Print the status of the cache directory for the current project'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and not __fish_seen_subcommand_from prune clean dir status help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and __fish_seen_subcommand_from prune" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and __fish_seen_subcommand_from prune" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and __fish_seen_subcommand_from prune" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and __fish_seen_subcommand_from clean" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and __fish_seen_subcommand_from clean" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and __fish_seen_subcommand_from clean" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and __fish_seen_subcommand_from dir" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and __fish_seen_subcommand_from dir" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and __fish_seen_subcommand_from dir" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and __fish_seen_subcommand_from status" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and __fish_seen_subcommand_from status" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and __fish_seen_subcommand_from status" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and __fish_seen_subcommand_from help" -f -a "prune" -d 'Prune the cache'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and __fish_seen_subcommand_from help" -f -a "clean" -d 'Delete the cache for the current project'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and __fish_seen_subcommand_from help" -f -a "dir" -d 'Print the cache directory for the current project'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and __fish_seen_subcommand_from help" -f -a "status" -d 'Print the status of the cache directory for the current project'
complete -c qlty -n "__fish_qlty_using_subcommand cache; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c qlty -n "__fish_qlty_using_subcommand check" -l sample -d 'Sample results from a number of files for each linter' -r
complete -c qlty -n "__fish_qlty_using_subcommand check" -l level -d 'Minimum level of issues to show' -r -f -a "note\t''
fmt\t''
low\t''
medium\t''
high\t''"
complete -c qlty -n "__fish_qlty_using_subcommand check" -s j -l jobs -d 'Maximum number of concurrent jobs' -r
complete -c qlty -n "__fish_qlty_using_subcommand check" -l filter -d 'Filter by plugin or check' -r
complete -c qlty -n "__fish_qlty_using_subcommand check" -l trigger -r -f -a "manual\t''
ide\t''
agent\t''
pre-commit\t''
pre-push\t''
build\t''"
complete -c qlty -n "__fish_qlty_using_subcommand check" -l upstream -d 'Upstream base ref to compare against' -r
complete -c qlty -n "__fish_qlty_using_subcommand check" -l fail-level -d 'Minimium level of issues to fail on' -r -f -a "note\t''
fmt\t''
low\t''
medium\t''
high\t''"
complete -c qlty -n "__fish_qlty_using_subcommand check" -s a -l all -d 'Check all files, not just changed'
complete -c qlty -n "__fish_qlty_using_subcommand check" -l fix -d 'Apply all auto-fix suggestions'
complete -c qlty -n "__fish_qlty_using_subcommand check" -l no-fix -d 'Do not apply auto-fix suggestions'
complete -c qlty -n "__fish_qlty_using_subcommand check" -l ai -d 'Generate AI fixes (requires OpenAI API key)'
complete -c qlty -n "__fish_qlty_using_subcommand check" -l unsafe -d 'Allow unsafe fixes'
complete -c qlty -n "__fish_qlty_using_subcommand check" -l no-formatters -d 'Disable formatter checks'
complete -c qlty -n "__fish_qlty_using_subcommand check" -l no-progress -d 'Disable progress bar'
complete -c qlty -n "__fish_qlty_using_subcommand check" -l no-fail -d 'Exit successfully regardless of what issues are found'
complete -c qlty -n "__fish_qlty_using_subcommand check" -l no-error -d 'Exit successfully regardless of linter errors'
complete -c qlty -n "__fish_qlty_using_subcommand check" -s v -l verbose -d 'Print verbose output'
complete -c qlty -n "__fish_qlty_using_subcommand check" -l summary -d 'Print a summary of issues'
complete -c qlty -n "__fish_qlty_using_subcommand check" -l no-cache -d 'Disable caching issues'
complete -c qlty -n "__fish_qlty_using_subcommand check" -l print-errors -d 'Print errors to stderr'
complete -c qlty -n "__fish_qlty_using_subcommand check" -l json -d 'JSON output'
complete -c qlty -n "__fish_qlty_using_subcommand check" -l sarif -d 'SARIF output'
complete -c qlty -n "__fish_qlty_using_subcommand check" -l skip-errored-plugins -d 'Allow individual plugins to be skipped if they fail or crash'
complete -c qlty -n "__fish_qlty_using_subcommand check" -l upstream-from-pre-push
complete -c qlty -n "__fish_qlty_using_subcommand check" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand check" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand check" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand completions" -l shell -d 'Shell to generate completions for' -r -f -a "bash\t''
elvish\t''
fish\t''
powershell\t''
zsh\t''"
complete -c qlty -n "__fish_qlty_using_subcommand completions" -l install -d 'Install completions for the given shell'
complete -c qlty -n "__fish_qlty_using_subcommand completions" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand completions" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand completions" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand config; and not __fish_seen_subcommand_from show validate migrate help" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand config; and not __fish_seen_subcommand_from show validate migrate help" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand config; and not __fish_seen_subcommand_from show validate migrate help" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand config; and not __fish_seen_subcommand_from show validate migrate help" -f -a "show" -d 'Print the full, merged configuration'
complete -c qlty -n "__fish_qlty_using_subcommand config; and not __fish_seen_subcommand_from show validate migrate help" -f -a "validate" -d 'Validate the current project\'s configuration'
complete -c qlty -n "__fish_qlty_using_subcommand config; and not __fish_seen_subcommand_from show validate migrate help" -f -a "migrate" -d 'Update qlty.toml with settings from .codeclimate.yml'
complete -c qlty -n "__fish_qlty_using_subcommand config; and not __fish_seen_subcommand_from show validate migrate help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c qlty -n "__fish_qlty_using_subcommand config; and __fish_seen_subcommand_from show" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand config; and __fish_seen_subcommand_from show" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand config; and __fish_seen_subcommand_from show" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand config; and __fish_seen_subcommand_from validate" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand config; and __fish_seen_subcommand_from validate" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand config; and __fish_seen_subcommand_from validate" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand config; and __fish_seen_subcommand_from migrate" -l dry-run -d 'Prints the migrated version of qlty.toml to the console without saving it to disk'
complete -c qlty -n "__fish_qlty_using_subcommand config; and __fish_seen_subcommand_from migrate" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand config; and __fish_seen_subcommand_from migrate" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand config; and __fish_seen_subcommand_from migrate" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand config; and __fish_seen_subcommand_from help" -f -a "show" -d 'Print the full, merged configuration'
complete -c qlty -n "__fish_qlty_using_subcommand config; and __fish_seen_subcommand_from help" -f -a "validate" -d 'Validate the current project\'s configuration'
complete -c qlty -n "__fish_qlty_using_subcommand config; and __fish_seen_subcommand_from help" -f -a "migrate" -d 'Update qlty.toml with settings from .codeclimate.yml'
complete -c qlty -n "__fish_qlty_using_subcommand config; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and not __fish_seen_subcommand_from publish transform complete help" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and not __fish_seen_subcommand_from publish transform complete help" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and not __fish_seen_subcommand_from publish transform complete help" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and not __fish_seen_subcommand_from publish transform complete help" -f -a "publish" -d 'Upload coverage reports to the Qlty Cloud'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and not __fish_seen_subcommand_from publish transform complete help" -f -a "transform" -d 'Transform coverage data to the Qlty format'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and not __fish_seen_subcommand_from publish transform complete help" -f -a "complete" -d 'Mark coverage as complete on Qlty Cloud'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and not __fish_seen_subcommand_from publish transform complete help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l report-format -d '[DEPRECATED, use --format] The format of the coverage report to transform. If not specified, the format will be inferred from the file extension or contents' -r -f -a "simplecov\t''
clover\t''
cobertura\t''
coverprofile\t''
dotcover\t''
lcov\t''
jacoco\t''
qlty\t''"
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l format -d 'The format of the coverage report to transform. If not specified, the format will be inferred from the file extension or contents' -r -f -a "simplecov\t''
clover\t''
cobertura\t''
coverprofile\t''
dotcover\t''
lcov\t''
jacoco\t''
qlty\t''"
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l output-dir -r -F
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l tag -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l override-build-id -d 'Override the build identifier from the CI environment' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l override-branch -d 'Override the branch from the CI environment' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l override-commit-sha -d 'Override the commit SHA from the CI environment' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l override-pr-number -d 'Override the pull request number from the CI environment' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l override-commit-time -d 'Override the commit time from git metadata. Accepts a Unix timestamp (seconds since epoch) or RFC3339/ISO8601 format' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l transform-add-prefix -d '[DEPRECATED, use --add-prefix] The prefix to add to file paths in coverage payloads, to make them match the project\'s directory structure' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l add-prefix -d 'The prefix to add to file paths in coverage payloads, to make them match the project\'s directory structure' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l transform-strip-prefix -d '[DEPRECATED, use --strip-prefix] The prefix to remove from absolute paths in coverage payloads to make them relative to the project root. This is usually the directory in which the tests were run. Defaults to the root of the git repository' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l strip-prefix -d 'The prefix to remove from absolute paths in coverage payloads to make them relative to the project root. This is usually the directory in which the tests were run. Defaults to the root of the git repository' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -s t -l token -d 'The token to use for authentication when uploading the report. By default, it retrieves the token from the QLTY_COVERAGE_TOKEN environment variable' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l project -d 'The name of the project to associate the coverage report with. Only needed when coverage token represents a workspace and if it cannot be inferred from the git origin' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l name -d 'A name for the upload to help identify it for debugging purposes' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l total-parts-count -d 'The total number of parts that qlty cloud should expect. Each call to qlty publish will upload one part. (The total parts count is per coverage tag e.g. if you have 2 tags each with 3 parts, you should set this to 3)' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l validate-file-threshold -d 'Custom threshold percentage for validation (0-100). Only applies when --validate is used. Default is 90' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l dry-run -d 'Do not upload the coverage report, only export it to the output directory'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l print -d 'Print coverage'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l verbose -d 'Verbose'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l json -d 'JSON output'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -s q -l quiet
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l skip-missing-files
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l validate -d 'Validate the coverage report before uploading it. This will check if the report is valid and minimum number of files are present'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l incomplete -d 'Mark this upload as incomplete. This is useful when issuing multiple qlty coverage publish commands for the same coverage tag. The server will merge the uploads into a single report when qlty coverage complete is called'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from publish" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from transform" -l report-format -d 'The format of the coverage report to transform. If not specified, the format will be inferred from the file extension or contents' -r -f -a "simplecov\t''
clover\t''
cobertura\t''
coverprofile\t''
dotcover\t''
lcov\t''
jacoco\t''
qlty\t''"
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from transform" -l add-prefix -d 'The prefix to add to file paths in coverage payloads. This helps to match the file paths with the project\'s directory structure' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from transform" -l strip-prefix -d 'The prefix to remove from absolute paths in coverage payloads to make them relative to the project root. This is usually the directory in which the tests were run. Defaults to the root of the git repository' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from transform" -l output -d 'The output file name for the transformed coverage report. If not specified, the report will be saved to \'coverage.jsonl\'' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from transform" -l dry-run
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from transform" -l print -d 'Print coverage'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from transform" -l json -d 'JSON output'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from transform" -s q -l quiet -d 'Suppresses most of the standard output messages'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from transform" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from transform" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from transform" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from complete" -l tag -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from complete" -l override-branch -d 'Override the branch from the CI environment' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from complete" -l override-commit-sha -d 'Override the commit SHA from the CI environment' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from complete" -l override-pr-number -d 'Override the pull request number from the CI environment' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from complete" -l override-build-id -d 'Override the build identifier from the CI environment' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from complete" -l override-commit-time -d 'Override the commit time from git metadata. Accepts a Unix timestamp (seconds since epoch) or RFC3339/ISO8601 format' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from complete" -s t -l token -d 'The token to use for authentication when uploading the report. By default, it retrieves the token from the QLTY_COVERAGE_TOKEN environment variable' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from complete" -l project -d 'The name of the project to associate the coverage report with. Only needed when coverage token represents a workspace and if it cannot be inferred from the git origin' -r
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from complete" -l dry-run -d 'Perform a dry-run without actually completing the coverage'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from complete" -s q -l quiet
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from complete" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from complete" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from complete" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from help" -f -a "publish" -d 'Upload coverage reports to the Qlty Cloud'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from help" -f -a "transform" -d 'Transform coverage data to the Qlty format'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from help" -f -a "complete" -d 'Mark coverage as complete on Qlty Cloud'
complete -c qlty -n "__fish_qlty_using_subcommand coverage; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c qlty -n "__fish_qlty_using_subcommand dashboard" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand dashboard" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand dashboard" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand deinit" -s y -l yes -d 'Proceed without confirmation'
complete -c qlty -n "__fish_qlty_using_subcommand deinit" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand deinit" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand deinit" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand discord" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand discord" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand discord" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand docs" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand docs" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand docs" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand fmt" -l sample -d 'Sample results from a number of files for each linter' -r
complete -c qlty -n "__fish_qlty_using_subcommand fmt" -l jobs -d 'Maximum number of concurrent jobs' -r
complete -c qlty -n "__fish_qlty_using_subcommand fmt" -l filter -d 'Filter by plugin or check' -r
complete -c qlty -n "__fish_qlty_using_subcommand fmt" -l trigger -r -f -a "manual\t''
ide\t''
agent\t''
pre-commit\t''
pre-push\t''
build\t''"
complete -c qlty -n "__fish_qlty_using_subcommand fmt" -l upstream -r
complete -c qlty -n "__fish_qlty_using_subcommand fmt" -l index-file -d 'Format files in the specified Git index file' -r -F
complete -c qlty -n "__fish_qlty_using_subcommand fmt" -s a -l all -d 'Check all files, not just changed'
complete -c qlty -n "__fish_qlty_using_subcommand fmt" -l no-progress -d 'Disable progress bar'
complete -c qlty -n "__fish_qlty_using_subcommand fmt" -l no-error -d 'Exit successfully regardless of linter errors'
complete -c qlty -n "__fish_qlty_using_subcommand fmt" -s v -l verbose -d 'Print verbose output'
complete -c qlty -n "__fish_qlty_using_subcommand fmt" -l index -d 'Format files in the Git index'
complete -c qlty -n "__fish_qlty_using_subcommand fmt" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand fmt" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand fmt" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand githooks; and not __fish_seen_subcommand_from install uninstall help" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand githooks; and not __fish_seen_subcommand_from install uninstall help" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand githooks; and not __fish_seen_subcommand_from install uninstall help" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand githooks; and not __fish_seen_subcommand_from install uninstall help" -f -a "install" -d 'Install the git hooks'
complete -c qlty -n "__fish_qlty_using_subcommand githooks; and not __fish_seen_subcommand_from install uninstall help" -f -a "uninstall" -d 'Uninstall the git hooks'
complete -c qlty -n "__fish_qlty_using_subcommand githooks; and not __fish_seen_subcommand_from install uninstall help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c qlty -n "__fish_qlty_using_subcommand githooks; and __fish_seen_subcommand_from install" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand githooks; and __fish_seen_subcommand_from install" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand githooks; and __fish_seen_subcommand_from install" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand githooks; and __fish_seen_subcommand_from uninstall" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand githooks; and __fish_seen_subcommand_from uninstall" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand githooks; and __fish_seen_subcommand_from uninstall" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand githooks; and __fish_seen_subcommand_from help" -f -a "install" -d 'Install the git hooks'
complete -c qlty -n "__fish_qlty_using_subcommand githooks; and __fish_seen_subcommand_from help" -f -a "uninstall" -d 'Uninstall the git hooks'
complete -c qlty -n "__fish_qlty_using_subcommand githooks; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c qlty -n "__fish_qlty_using_subcommand init" -l source -d 'A custom source to use for plugins. This can be a URL(name=url) or a path to a local directory(name=directory)' -r
complete -c qlty -n "__fish_qlty_using_subcommand init" -s y -l yes -d 'Answer yes to all prompts'
complete -c qlty -n "__fish_qlty_using_subcommand init" -s n -l no -d 'Answer no to all prompts'
complete -c qlty -n "__fish_qlty_using_subcommand init" -l skip-plugins -d 'Skip enabling plugins'
complete -c qlty -n "__fish_qlty_using_subcommand init" -l dry-run -d 'Print the generated configuration to stdout instead of saving to disk'
complete -c qlty -n "__fish_qlty_using_subcommand init" -l skip-default-source -d 'Initialize without default source'
complete -c qlty -n "__fish_qlty_using_subcommand init" -l with-prefixes -d 'Warning: this option has been deprecated! Enable plugin prefix detection'
complete -c qlty -n "__fish_qlty_using_subcommand init" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand init" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand init" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand install" -s j -l jobs -d 'Maximum number of concurrent jobs' -r
complete -c qlty -n "__fish_qlty_using_subcommand install" -l filter -d 'Filter by plugin or check' -r
complete -c qlty -n "__fish_qlty_using_subcommand install" -l no-progress -d 'Disable progress bar'
complete -c qlty -n "__fish_qlty_using_subcommand install" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand install" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand install" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand metrics" -l max-depth -d 'Directory depth to print, this flag will also set to print per-directory stats' -r
complete -c qlty -n "__fish_qlty_using_subcommand metrics" -l sort -d 'Sort output by column' -r -f -a "name\t''
classes\t''
functions\t''
fields\t''
lines\t''
loc\t''
complexity\t''
lcom\t''"
complete -c qlty -n "__fish_qlty_using_subcommand metrics" -l limit -d 'Maximum rows to print' -r
complete -c qlty -n "__fish_qlty_using_subcommand metrics" -l upstream -d 'Upstream base ref to compare against' -r
complete -c qlty -n "__fish_qlty_using_subcommand metrics" -s a -l all -d 'Compute metrics for all files, not just changed'
complete -c qlty -n "__fish_qlty_using_subcommand metrics" -s d -l dirs -d 'Print per-directory stats'
complete -c qlty -n "__fish_qlty_using_subcommand metrics" -l functions -d 'Print function stats'
complete -c qlty -n "__fish_qlty_using_subcommand metrics" -l exclude-tests -d 'Exclude tests'
complete -c qlty -n "__fish_qlty_using_subcommand metrics" -l quiet -d 'Only show results'
complete -c qlty -n "__fish_qlty_using_subcommand metrics" -l json -d 'JSON output'
complete -c qlty -n "__fish_qlty_using_subcommand metrics" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand metrics" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand metrics" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand panic" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand panic" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand panic" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand parse" -s l -l locations -d 'Print location information'
complete -c qlty -n "__fish_qlty_using_subcommand parse" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand parse" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand parse" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand patch" -l unsafe -d 'Allow unsafe fixes'
complete -c qlty -n "__fish_qlty_using_subcommand patch" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand patch" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand patch" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and not __fish_seen_subcommand_from enable disable list upgrade help" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and not __fish_seen_subcommand_from enable disable list upgrade help" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and not __fish_seen_subcommand_from enable disable list upgrade help" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and not __fish_seen_subcommand_from enable disable list upgrade help" -f -a "enable" -d 'Enable plugins for the current project'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and not __fish_seen_subcommand_from enable disable list upgrade help" -f -a "disable" -d 'Disable plugins for the current project'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and not __fish_seen_subcommand_from enable disable list upgrade help" -f -a "list" -d 'List all available plugins'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and not __fish_seen_subcommand_from enable disable list upgrade help" -f -a "upgrade" -d 'Upgrade a plugin for the current project'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and not __fish_seen_subcommand_from enable disable list upgrade help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and __fish_seen_subcommand_from enable" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and __fish_seen_subcommand_from enable" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and __fish_seen_subcommand_from enable" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and __fish_seen_subcommand_from disable" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and __fish_seen_subcommand_from disable" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and __fish_seen_subcommand_from disable" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and __fish_seen_subcommand_from list" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and __fish_seen_subcommand_from list" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and __fish_seen_subcommand_from upgrade" -l version -d 'Optional - Specific version to upgrade to' -r
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and __fish_seen_subcommand_from upgrade" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and __fish_seen_subcommand_from upgrade" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and __fish_seen_subcommand_from upgrade" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and __fish_seen_subcommand_from help" -f -a "enable" -d 'Enable plugins for the current project'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and __fish_seen_subcommand_from help" -f -a "disable" -d 'Disable plugins for the current project'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and __fish_seen_subcommand_from help" -f -a "list" -d 'List all available plugins'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and __fish_seen_subcommand_from help" -f -a "upgrade" -d 'Upgrade a plugin for the current project'
complete -c qlty -n "__fish_qlty_using_subcommand plugins; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c qlty -n "__fish_qlty_using_subcommand smells" -l upstream -d 'Upstream base ref to compare against' -r
complete -c qlty -n "__fish_qlty_using_subcommand smells" -s a -l all -d 'Compute smells for all files, not just changed'
complete -c qlty -n "__fish_qlty_using_subcommand smells" -l no-duplication -d 'Don\'t check for duplication'
complete -c qlty -n "__fish_qlty_using_subcommand smells" -l include-tests -d 'Include tests'
complete -c qlty -n "__fish_qlty_using_subcommand smells" -l no-snippets -d 'Don\'t show code snippets'
complete -c qlty -n "__fish_qlty_using_subcommand smells" -l quiet -d 'Only show results'
complete -c qlty -n "__fish_qlty_using_subcommand smells" -l json -d 'JSON output'
complete -c qlty -n "__fish_qlty_using_subcommand smells" -l sarif -d 'SARIF output'
complete -c qlty -n "__fish_qlty_using_subcommand smells" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand smells" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand smells" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand telemetry" -l track -r -F
complete -c qlty -n "__fish_qlty_using_subcommand telemetry" -l panic -r -F
complete -c qlty -n "__fish_qlty_using_subcommand telemetry" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand telemetry" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand telemetry" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand upgrade; and not __fish_seen_subcommand_from source help" -l version -d 'The version to upgrade to. Defaults to the latest version' -r
complete -c qlty -n "__fish_qlty_using_subcommand upgrade; and not __fish_seen_subcommand_from source help" -l force -d 'Run the upgrade even if the latest version is already installed'
complete -c qlty -n "__fish_qlty_using_subcommand upgrade; and not __fish_seen_subcommand_from source help" -l dry-run -d 'Whether to perform a dry run'
complete -c qlty -n "__fish_qlty_using_subcommand upgrade; and not __fish_seen_subcommand_from source help" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand upgrade; and not __fish_seen_subcommand_from source help" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand upgrade; and not __fish_seen_subcommand_from source help" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand upgrade; and not __fish_seen_subcommand_from source help" -f -a "source" -d 'Upgrades the source'
complete -c qlty -n "__fish_qlty_using_subcommand upgrade; and not __fish_seen_subcommand_from source help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c qlty -n "__fish_qlty_using_subcommand upgrade; and __fish_seen_subcommand_from source" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand upgrade; and __fish_seen_subcommand_from source" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand upgrade; and __fish_seen_subcommand_from source" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand upgrade; and __fish_seen_subcommand_from help" -f -a "source" -d 'Upgrades the source'
complete -c qlty -n "__fish_qlty_using_subcommand upgrade; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c qlty -n "__fish_qlty_using_subcommand validate" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand validate" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand validate" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand version" -l debug -d 'Log with more information'
complete -c qlty -n "__fish_qlty_using_subcommand version" -l no-upgrade-check -d 'Do not check for updates'
complete -c qlty -n "__fish_qlty_using_subcommand version" -s h -l help -d 'Print help'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "auth" -d 'Manage authentication'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "build" -d 'Run an analysis build'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "cache" -d 'Manage cache'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "check" -d 'Run linters'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "completions" -d 'Generate or install Qlty CLI shell completions'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "config" -d 'Print current version'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "coverage" -d 'View, transform, and publish code coverage'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "dashboard" -d 'Open the Qlty Cloud dashboard in the browser'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "deinit" -d 'Remove Qlty from the current repository'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "discord" -d 'Join our Discord server (opens in the browser)'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "docs" -d 'Open the docs website in the browser'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "fmt" -d 'Auto-format files by rewriting them'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "githooks" -d 'Manage Git hooks'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "init" -d 'Set up Qlty in the current repository'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "install" -d 'Install linters and their dependencies'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "metrics" -d 'Compute code quality metrics'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "panic" -d 'Intentionally panic to test crash handling'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "parse" -d 'Parse source code'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "patch" -d 'Apply patches from check'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "plugins" -d 'Manage plugins'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "smells" -d 'Find code smells like duplication and complexity'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "telemetry" -d 'Send telemetry'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "upgrade" -d 'Upgrade the Qlty CLI'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "validate" -d 'Validate the project'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "version" -d 'Print the current Qlty CLI version'
complete -c qlty -n "__fish_qlty_using_subcommand help; and not __fish_seen_subcommand_from auth build cache check completions config coverage dashboard deinit discord docs fmt githooks init install metrics panic parse patch plugins smells telemetry upgrade validate version help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from auth" -f -a "login" -d 'Authenticate with Qlty Cloud'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from auth" -f -a "logout" -d 'Log out from Qlty Cloud'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from auth" -f -a "signup" -d 'Open the Qlty Cloud sign up flow in the browser'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from auth" -f -a "whoami" -d 'Print the email address of the authenticated Qlty Cloud user'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from cache" -f -a "prune" -d 'Prune the cache'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from cache" -f -a "clean" -d 'Delete the cache for the current project'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from cache" -f -a "dir" -d 'Print the cache directory for the current project'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from cache" -f -a "status" -d 'Print the status of the cache directory for the current project'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from config" -f -a "show" -d 'Print the full, merged configuration'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from config" -f -a "validate" -d 'Validate the current project\'s configuration'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from config" -f -a "migrate" -d 'Update qlty.toml with settings from .codeclimate.yml'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from coverage" -f -a "publish" -d 'Upload coverage reports to the Qlty Cloud'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from coverage" -f -a "transform" -d 'Transform coverage data to the Qlty format'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from coverage" -f -a "complete" -d 'Mark coverage as complete on Qlty Cloud'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from githooks" -f -a "install" -d 'Install the git hooks'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from githooks" -f -a "uninstall" -d 'Uninstall the git hooks'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from plugins" -f -a "enable" -d 'Enable plugins for the current project'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from plugins" -f -a "disable" -d 'Disable plugins for the current project'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from plugins" -f -a "list" -d 'List all available plugins'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from plugins" -f -a "upgrade" -d 'Upgrade a plugin for the current project'
complete -c qlty -n "__fish_qlty_using_subcommand help; and __fish_seen_subcommand_from upgrade" -f -a "source" -d 'Upgrades the source'
